#!/usr/bin/ruby -w

=begin
Author: Gabe Berke-Williams, 2008
This is the shell script, which is a wrapper around Pidgin2Adium::LogConverter.
Call it like so:
<tt>pidgin2adium -i ~/in_logs/ -a me,screenname,my_pidgin_alias,other_pidgin_alias</tt>
For <tt>-a/--aliases</tt>, there is no need to use spaces or capitalization, since spaces will be stripped out and the aliases will
be lowercased anyway.
=end

require 'pidgin2adium'
require 'optparse'

options = {}
OptionParser.new do |opts|
    opts.banner = "Usage: #{File.basename($0)} [options]"
    opts.on('-i', '--in IN_DIR', 'Specify directory where pidgin logs are stored') do |i|
	options[:in] = i
    end
    opts.on('-t', "--time-zone [TIME ZONE]",
	    "Set time zone like \"EST\". Defaults to local time zone: #{Time.now.zone}") do |tz|
	options[:timezone] = tz
    end
    opts.on('-a', "--aliases MY_ALIASES_AND_SNs",
	    "A comma-separated list of your aliases and screenname(s) so this script knows which person in a chat is you.",
	    "Whitespace is removed and aliases are lowercased.") do |aliases|
	options[:aliases] = aliases.split(',')
    end
    opts.on('-f', '--force', 'Overwrite logs in Adium log folder with converted logs of same name') do |f|
	options[:force] = f
    end
    opts.on_tail("-h", "--help", "Show this message") do
	puts opts
	exit
    end
end.parse!

need_opts = false
required_opts = [[:i, :in], [:a, :aliases]]
required_opts.each do |short, long|
    if options.has_key?(short) or options.has_key?(long)
	next
    else
	need_opts = true
	puts "Required option -#{short}/--#{long} missing."
    end
end
exit 1 if need_opts

log_converter = Pidgin2Adium::LogConverter.new(options[:in],
					       options[:aliases],
					       options[:timezone],
					       options[:force],
					       # user_temp_dir
					      )

log_converter.start
