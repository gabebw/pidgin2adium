#!/usr/bin/ruby -w

=begin
Author: Gabe Berke-Williams, 2008
This is the shell script, which is a wrapper around Pidgin2Adium::LogConverter.
Call it like so:
<tt>pidgin2adium -i ~/in_logs/ -a me,screenname,my_pidgin_alias,other_pidgin_alias</tt>
For <tt>-a/--aliases</tt>, there is no need to use spaces or capitalization, since spaces will be stripped out and the aliases will
be lowercased anyway.
=end

require 'pidgin2adium'
require 'optparse'

options = {}
oparser = OptionParser.new do |opts|
    opts.banner = "Usage: #{File.basename($0)} [options]"
    opts.on('-i', '--in=IN_DIR', String, 'Specify directory where pidgin logs are stored') do |i|
	options[:in] = i
    end
    opts.on('-a screenname,alias1,alias2', "--aliases=screenname,alias1,alias2", Array,
	    "A comma-separated list of your aliases and screenname(s) so this script knows which person in a chat is you.",
	    "Whitespace and case do not matter.") do |aliases|
	options[:aliases] = aliases
    end
    opts.on('-t', "--time-zone=ZONE", String,
	    "Set time zone (example: \"EST\"). Defaults to local time zone: #{Time.now.zone}") do |tz|
	options[:timezone] = tz
    end
    opts.on('-f', '--force', 'If this is set, then logs in the Adium log folder that have the same name as converted logs will be overwritten.') do |f|
	options[:force] = f
    end
    opts.on_tail("-h", "--help", "Show this message") do
	puts opts
	exit
    end
end
begin
    oparser.parse!
rescue => bang
    if bang.class == OptionParser::MissingArgument 
	# No argument provided for a switch that requires an argument.
	puts '"%s" requires an argument.' % bang.args[0]
	exit 1
    elsif bang.class == OptionParser::InvalidOption 
	# Provided a switch that we don't handle.
	puts '"%s" is not a valid switch.' % bang.args[0]
    elsif bang.class == OptionParser::NeedlessArgument
	# Raised when argument provided for a switch that doesn't take an argument.
	puts bang.message
    end
end

need_opts = false
required_opts = [[:i, :in], [:a, :aliases]]
required_opts.each do |short, long|
    if options.has_key?(short) or options.has_key?(long)
	next
    else
	need_opts = true
	puts "Required option -#{short}/--#{long} missing."
    end
end
if need_opts
    puts oparser.to_s
    exit 1
end

log_converter = Pidgin2Adium::LogConverter.new(options[:in],
					       options[:aliases],
					       options[:timezone],
					       options[:force]
					      )
					      # user_temp_dir

log_converter.start
